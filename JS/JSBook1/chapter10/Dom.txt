Dom

所有节点类型都继承自Node类型
Node类型中定义了12个数值常亮，用于表示所有的节点类型
nodeType属性：用于表明节点的类型
 Node.ELEMENT_NODE(1)；
 Node.ATTRIBUTE_NODE(2)；
 Node.TEXT_NODE(3)；
 Node.CDATA_SECTION_NODE(4)；
 Node.ENTITY_REFERENCE_NODE(5)；
 Node.ENTITY_NODE(6)；
 Node.PROCESSING_INSTRUCTION_NODE(7)；
 Node.COMMENT_NODE(8)；
 Node.DOCUMENT_NODE(9)；
 Node.DOCUMENT_TYPE_NODE(10)；
 Node.DOCUMENT_FRAGMENT_NODE(11)；
 Node.NOTATION_NODE(12)。

-------------------------------------------
节点的属性
  nodeName
  nodeValue
  节点关系
  childNodes（保存着一个NodeList对象）
  parentNode
  previousSibling
  nextSibling
  firstChild
  lastChild
  hasChildNodes() 包含子节点返回true
  ownerDocument   表示整个文档的文档节点（根节点）
操作节点方法
  appendChild()   向末尾添加一个节点
  insertBefore()  接受两个参数：要插入的节点和作为参照的节点
  replaceChild()  
  removeChild(要删除的节点)
  cloneNode(true) 深拷贝
  cloneNode(false)浅拷贝

-------------------------------------------

Document类型: 只读的，只能有一个元素子节点
  document对象是HTMLDocument（继承自Document类型）的一个实例
  document对象是 window 对象的一个属性
nodeType = 9;
nodeName = "#document"
nodeValue 的值为 null
-------------------
document对象的相关属性和方法

  documentElement -> <html>
  body  -> <body>   所有浏览器都支持document.documentElement和document.body属性
  doctype -> <!DOCTYPE>

  title：包含着<title>元素中的文本

  与网页的请求相关：所有这些信息都存在于请求的 HTTP 头部，只不过是通过这些属性让我们能够在JavaScrip中访问它们而已
    URL:包含页面完整的 URL（即地址栏中显示的 URL）；http://www.wrox.com/WileyCDA/
    domain：只包含与页面的域名；www.wrox.com
    referrer：保存着链接到当前页面的那个页面的 URL

  getElementById()
  getElementsByTagName()  这个方法会返回一个 HTMLCollection 对象,类似于NodeList
    HTMLCollection对象有一个方法 -> namedItem():通过元素的name特性取得集合中的项
  getElementsByName():返回带有给定 name 特性的所有元素 

  特殊集合
    document.anchors    包含文档中所有带 name 特性的<a>元素
    document.applets    包含文档中所有的<applet>元素，因为不再推荐使用<applet>元素，
所以这个集合已经不建议使用了
    document.forms      包含文档中所有的<form>元素
    document.images     包含文档中所有的<img>元素
    document.links      包含文档中所有带 href 特性的<a>元素

  document.implementation属性就是为此（检测浏览器实现了DOM的哪些部分）提供相应信息和功能的对象
  hasFeature():接受两个参数,要检测的 DOM 功能的名称及版本号
  document.implementation.hasFeature("XML", "1.0");

  将输出流写入网页
  write()
  writeln()
  open()
  close() 用于打开和关闭网页的输出流
-------------------------------------------
Element类型
nodeType = 1
nodeName 为标签名 tagName属性，包含相同的内容
nodeValue 的值为 null

元素类型相关属性: R W
  id
  title
  lang
  dir
  className   与元素的class特性对应，即为元素指定的CSS类
方法
  getAttribute('传入以上属性名')  要想得到class特性值，应该传入"class"而不是"className"，后者只有在通过对象属性访问特性时才用
  setAttribute()  
  removeAttribute()  

  getElementsByTagName()  元素也支持这个方法，和document的方法相同
    返回后代所有的元素（不只是子元素）--亲测

自定义属性：加上data-前缀，不能通过属性访问，可以使用getAttribute()方法访问；设置时也一样
<div id="myDiv" align="left" my_special_attribute="hello!"></div>
  alert(div.my_special_attribute); //undefined（IE 除外）
  div.getAttribute("my_special_attribute")

attributes 属性
Element 类型是使用 attributes 属性的唯一一个 DOM 节点类型
attributes 属性中包含一个NamedNodeMap，与 NodeList 类似
NamedNodeMap 对象拥有下列方法
   getNamedItem(name)：返回nodeName属性等于name的节点；
   removeNamedItem(name)：从列表中移除 nodeName 属性等于 name 的节点；
   setNamedItem(node)：向列表中添加节点，以节点的 nodeName 属性为索引；
   item(pos)：返回位于数字 pos 位置处的节点。

  var id = element.attributes.getNamedItem("id").nodeValue;

创建元素
  document.createElement('元素标签名')：此处只是创建一个节点，并未添加到文档树中，所以此时不会有任何效果

-------------------------------------------
Text类型
 nodeType = 3
 nodeName 的值为"#text"
 nodeValue 的值为节点所包含的文本  data属性，包含相同的内容
 parentNode 是一个 Element

length属性：保存着文本节点中字符的数目

 appendData(text)：将 text 添加到节点的末尾。
 deleteData(offset, count)：从 offset 指定的位置开始删除 count 个字符。
 insertData(offset, text)：在 offset 指定的位置插入 text。
 replaceData(offset, count, text)：用 text 替换从 offset 指定的位置开始到 offset+count 为止处的文本。
 splitText(offset)：从 offset 指定的位置将当前文本节点分成两个文本节点。
 substringData(offset, count)：提取从 offset 指定的位置开始到 offset+count 为止处的字符串。

div.firstChild或者div.childNodes[0]  访问div的文本节点

创建文本节点
document.createTextNode('文本字符串')

一般情况下，每个元素只有一个文本子节点
DOM 文档中存在相邻的同胞文本节点很容易导致混乱，因为分不清哪个文本节点表示哪个字符串

normalize() 能够将相邻文本节点合并,如果在一个包含两个或多个文本节点的父元素上调用 normalize()方法，则会将所有文本节点合并成一个
节点
splitText() 分割文本节点；按照指定的位置分割 nodeValue 值

var element = document.createElement("div"); 
element.className = "message"; 
var textNode = document.createTextNode("Hello world!"); 
element.appendChild(textNode); 
document.body.appendChild(element); 
var newNode = element.firstChild.splitText(5); 
alert(element.firstChild.nodeValue); //"Hello" 
alert(newNode.nodeValue); //" world!" 
alert(element.childNodes.length); //2

-------------------------------------------
Comment类型

 nodeType = 8;
 nodeName 的值为"#comment"；
 nodeValue 的值是注释的内容；
 parentNode 可能是 Document 或 Element；
 不支持（没有）子节点。

Comment 类型与 Text 类型继承自相同的基类，因此它拥有除 splitText()之外的所有字符串操作方法

创建注释节点
document.createComment()

-------------------------------------------
DocumentType类型  Document-Type 包含着与文档的 doctype 有关的所有信息

 nodeType = 10；
 nodeName 的值为 doctype 的名称；
 nodeValue 的值为 null；
 parentNode 是 Document；
 不支持（没有）子节点。

-------------------------------------------
DocumentFragment类型： DocumentFragment在文档中没有对应的标记

 nodeType = 11；
 nodeName 的值为"#document-fragment"；
 nodeValue 的值为 null；
 parentNode 的值为 null；
 子节点可以是 Element、ProcessingInstruction、Comment、Text、CDATASection 或
EntityReference。

创建文档片段
document.createDocumentFragment()

添加到文档片段中的新节点同样也不属于文档树。可以通过 appendChild()或 insertBefore()将文档片段中内容添加到文档中。
在将文档片段作为参数传递给这两个方法时，实际上只会将文档片段的所有子节点添加到相应位置上

var fragment = document.createDocumentFragment(); 
var ul = document.getElementById("myList"); 
var li = null; 
for (var i=0; i < 3; i++){ 
 li = document.createElement("li"); 
 li.appendChild(document.createTextNode("Item " + (i+1))); 
 fragment.appendChild(li); 
} 
ul.appendChild(fragment);

-------------------------------------------
Attr类型  元素的特性在 DOM 中以 Attr 类型来表示

 nodeType = 2；
 nodeName 的值是特性的名称；
 nodeValue 的值是特性的值；
 parentNode 的值为 null；
 在 HTML 中不支持（没有）子节点；

从技术角度讲，特性就是存在于元素的 attributes 属性中的节点。

创建特性节点
document.createAttribute('特性名称')

var attr = document.createAttribute("align"); 
attr.value = "left"; 
element.setAttributeNode(attr); 
alert(element.attributes["align"].value); //"left" 
alert(element.getAttributeNode("align").value); //"left" 
alert(element.getAttribute("align")); //"left"

nodeType 
1   Element类型
2   Attr类型
3   Text类型
8   Comment类型
9   Document类型
10  DocumentType类型
11  DocumentFragment类型

--------------------------------------------------------------------------------------
动态脚本
const script = document.createElement("script")
script.type = "text/javascript"
script.src = "demo.js"
document.body.appendChild(script)

动态样式
var link = document.createElement("link"); 
link.rel = "stylesheet"; 
link.type = "text/css"; 
link.href = "style.css"; 
var head = document.getElementsByTagName("head")[0]; 
head.appendChild(link);