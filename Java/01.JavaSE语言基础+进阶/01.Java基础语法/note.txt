------------------------------
java  计算机编程语言

发展历程
1995年Sun公司发布java1.0版本，1996年1月正式发布
2004  java5
2009  Oracle以7.4亿美元收购Sun公司
2014  java8

应用行业
  电商
  物流
  金融
  大数据
----------
二进制  0 1
每一个0或者1，叫着一个bit（比特，位）
----------
文件单位(1024进制)
  位  : bit 一个数字0或1;
  字节：计算机中最小的存储单元  1 Byte = 8 bit;
  KB  : 1KB = 1024 Byte
  MB
  GB
  TB
  PB
  EB
  ZB
----------
MS-DOS  Microsoft Disk Operating System
命令提示符  cmd   
win+R --> cmd
----------
cmd常用命令
  D:                进入其他盘的根路径  （不区分大小写）
  cd 文件夹名称      进入文件夹
  tab键补全
  cd ..             返回上一级
  cd 文件夹1\文件夹2\文件夹n     直接进入多级文件夹
  cd \                          直接返回根路径 
  dir               显示文件夹里的内容
  cls(clear screen) 清空屏幕  
  exit              退出，关闭窗口 

----------
java  跨平台性  不区分操作系统
JVM   相当于翻译  区分平台  基于不同的系统翻译java程序

----------
JDK(Java Development Kit) java程序开发工具包，包含JRE和开发人员使用的工具
JRE(Java Runtime Environment) 运行java环境，包含了JVM和运行时所需要的核心类库

----------
下载JDK 官网 oracle.com
java9.0.4
安装路径不要 中文和空格

----------
运行java
  需要完整的路径  D:\Java\jdk-9.0.4\bin\java.exe  (.exe可以省略)
配置环境变量(配置Path-->可以在任何目录运行java)
  在系统变量中新建或修改（区分大小写）
    JAVA_HOME   java安装路径  D:\Java\jdk9.0.4
    Path        %JAVA_HOME%\bin 
  配置环境变量后重启cmd

------------------------------
.class  java字节码文件
javac.exe 编译器
java.exe  解释器

----------
编译  javac 文件名.java
运行  java 文件中的公共类名（文件名）
----------
System.out.println("hello world");  不能少了;
----------
注释：  // 单行注释
        /*
          多行注释 / 区块注释
        */

类：是java当中所有源代码的基本组织单位
main方法：  程序执行的起点

------------------------------
关键字：  有特殊含义的、被保留的、不能随意使用的字符
关键字特点 
  1.完全小写字母
  2.在增强版的记事本(notepad++)中有特殊颜色

----------
标识符
  硬性要求
    数字、英文、下划线、$
    不能以数组开头
    不能是关键字
  建议
    类名：  首字母大写（大驼峰式）
    变量名: 首字母小写（小驼峰式）
    方法名: 小驼峰式

------------------------------
常量和变量
----------
常量
  字符串常量    "fdjja" ""
  整数常量      12
  浮点数常量    1.2
  字符常量      'a' （单引号，只能有一个字符，也不能为空，可以有 一个空格）
  布尔常量      true  false
  空常量        null  没有任何数据
----------
数据类型：
基本数据类型（四类八种）  
  整数型       取值范围           内存占用
    byte       -128~127           1字节
    short      -32768~32767       2字节
    int        -2e31~2e31-1       4字节
    long       -2e63~2e63-1       8字节
  浮点型  
    float                         4字节
    double                        8字节
  字符型  
    char        0-65535           2字节  
  布尔型        true  false        1字节
    boolean
应用数据类型
  字符串 
  数组
  类
  接口
  Lambda

----------
变量  程序运行期间，内容可以发生改变  

创建一个变量：  数据类型  变量名称
赋值：          变量名称 = 数据值

创建一个变量并赋值：  数据类型 变量名称 = 数据值

----------
int num1;
num1 = 10;

整数类型默认值为int
Long类型后缀  L   （大小写都可以，最好大写）

浮点型默认值为double
float类型后缀 F

----------
变量的注意事项
  变量之间的名称不可以重复
    int num = 1;
    int num = 2;
  对于float和long类型，字符后缀不要丢掉
  使用byte或者short时，不能超过数据的取值范围
  没有进行赋值的变量，不能直接使用 
  变量不能超过作用域的范围  （程序从上至下执行） 
  可以通过一个语句创建多个变量，但是一般情况不推荐这么写
    int a = 10, b = 20;

------------------------------
自动类型转换
  特点：代码不需要进行特殊处理，自动完成
  规则：数据范围从小到大（与字节数无关）（float类型数据范围比long类型大）
    float num = 30L;
    System.out.print(num);  // 30.0
强制类型转换
  特点： 代码需要进行特殊的格式处理，不能自动完成
  格式： 范围小的类型 变量名 = （范围小的类型） 原本范围大的数据
        int a = (int) 100L;

注意事项：    
  1、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出；
     int num = (int) 6000000000L; // 超过int数据范围
     System.out.print(num);  // 会发生数据溢出

     int num = (int) 3.5;
     System.out.print(num);  // 3，发生了精度损失
  2、byte/short/char这三种类型都可以发生数据运算，例如加法‘+’；  
      char ch = 'A';
      System.out.print(ch + 1); // 66 
  3、byte/short/char这三种类型在运算的时候，都会被首先提升成为int类型，然后再计算；
      byte num1 = 40;
      byte num2 = 50;
      byte result = num1 + num2; // 报错；（使用int result = num1 + num2；）

      short num3 = 60;
      short result2 = (short) (num1 + num3); // 强制类型转换int -> short
  4、boolean类型不能发生数据类型转换   

ASCII码表（美国信息交换标准代码）:记录数字与字符的对应关系；编码表； 128种(0-127)
48 '0'
65 'A'
97 'a'  

Unicode码表（万国码）：开头0-127和ASCII码表完全一样，但是从128开始包含其他字符
20013 '中'

------------------------------
运算符
表达式：用运算符连起来的式子
----------
算数运算符
  四则运算、取模%、自增++、字减--
  取模%只对于整数的除法有意义  
两种不同数据类型运算，运算结果取数据类型大的那种  

只有变量才能使用自增++、自增--运算符，常量不可改变，所以不能用
----------
赋值运算符
只有变量才能使用赋值运算符，常量不能赋值  10 = 20

----------
比较运算符  == <  >  <=   >=  !=
结果是一个boolean值; true或false
不能连着写  1<x<3 错误写法

----------
逻辑运算符
&&  ||  ！ 具有短路效果，如果根据一个结果可以判断最终的结果，那么就不用执行后面结果，从而节省一定的性能

----------
三元运算符
int max = a > b ? a : b;

------------------------------
方法入门
方法概念：将一个功能抽取出来，把代码定义在一个大括号内，形成一个单独的功能
定义方法：
  public static void 方法名(){  // 方法名使用小驼峰
    方法体  // 可以包含任意语句
  }

方法调用：
  方法名();

------------------------------
JDK9新特性-Jshell： 轻量工具，可以直接输出和进行简单运算
启动Jshell    输入  jshell
退出:  /exit

------------------------------
判断循环语句

------------------------------
开发工具IDEA 

IDE（Integrated Development Environment）集成开发环境

项目project -> 模块module -> 包 package

包 package
  命名： 小写英文和英文句点   （把公司域名倒过来写）

常用快捷键
ctrl+shift+f10    编译程序  
alt+4             打开运行结果框

idea基本配置
  font
  自动补全(alt+/)  settings -> keymap(快捷键设置)->Main menu -> code -> completion -> basic

*****
----------
报错问题记录

有关 Picked up _JAVA_OPTIONS系列错误抛出的问题，这类错误多半是由于在本地正常安装了JDK 或者JRE后，再安装了其它会添加或更改JAVA环境变量的软件，比如测试常用工具QTP的JAVA-ADDIN插件等等，在这些软件的安装过程中，会自动添加一些JAVA环境变量信息，这样就导致了环境变量的冲突和错误，所以当出现这类错误时，只需将除了最初设定的JAVA_HOME和CLASSPATH外，其余自设的JAVA环境变量全部删除即可，或者删除掉相关的JAVA_TOOL_OPTIONS参数。 

出现了错误：需要class, interface或enum
其实就是，原本默认的txt编码格式应该是ANSI，然而在创建GetLucky.java的编码格式成为了UTF-8，导致文本中存在BOM，java源代码中不可以有BOM，javac无法识别，会出现乱码 。
BOM（byte-order mark），即字节顺序标记，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开头的特殊标记，用来识别Unicode文件的编码类型。对于UTF-8来说，BOM并不是必须的，因为BOM用来标记多字节编码文件的编码类型和字节顺序（big-endian或little-endian）。在绝大多数编辑器中都看不到BOM字符，因为它们能理解Unicode，去掉了读取器看不到的题头信息。若要查看某个Unicode文件是否以BOM开头，可以使用十六进制编辑器。
***** 

------------------------------
idea快捷输出
5.fori    输出for循环快捷键
psvm      public static void main(String[] args){}
sout      System.out.println();
shift+f6  所有相同代码会一起改变

------------------------------
方法定义
方法是若干语句的功能集合
定义方法的完整格式:（java基础就是记住格式）
修饰符  返回值类型  方法名称(参数类型 参数名称, ...){
  方法体 
  return 返回值
}

修饰符： public static
返回值数据类型： 
  void： 没有return语句，不会返回结果
  int:
  ...

方法名称：小驼峰
参数类型：进入方法的数据是什么类型

return： 停止当前方法；将后面的返回值还给调用出
***
注意：return 后面的“返回值”，必须和方法名称前面的“返回值类型”，保持对应。
***

----------
方法调用：
1、单独调用： 方法名称(参数);
2、打印调用： System.out.println(方法名称(参数));
3、赋值调用： 数据类型 变量名称 = 方法名称(参数);  把方法的结果赋值给一个变量
注意：void： 没有return语句，只能够单独调用，不能进行打印调用或者赋值调用；

----------
注意：
  1、方法定义在类中，不能定义在方法中
  2、return后面的返回值数据，必须和方法的返回值类型一样
  ...

----------
方法重载 (overload)   
方法名相同，参数个数不同或参数类型不同
与参数的名称无关、与方法的返回值无关

------------------------------
数组：是一种容器，可以存放多个数据值
特点： 
  是一种引用类型
  数组中的数据类型必须一致
  数组的长度在程序运行期间不可改变

数组初始化
1、动态初始化（指定长度）  
  格式： 数据类型[] 数组名称 = new 数据类型[数组长度]

解析含义：
左侧数据类型：也就是数组当中保存的数据，全都是统一的什么类型
左侧的中括号：代表我是一个数组
左侧数组名称：给数组取一个名字
右侧的new：代表创建数组的动作
右侧数据类型：必须和左边的数据类型保持一致
右侧中括号的长度：也就是数组当中，到底可以保存多少个数据，是一个int数字

不管是基本类型还是引用类型，都可以作为数组当中元素的数据类型

2、静态初始化（指定内容）  