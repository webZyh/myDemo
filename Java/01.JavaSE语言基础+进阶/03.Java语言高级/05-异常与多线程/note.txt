---------------------------------
异常类
类 Throwable
直接已知子类： 
  Error：错误，必须修改源代码
  Exception 编译期异常
    RuntimeException “运行期间”抛出的异常 

异常处理语法：
try{
  // 可能会出现异常的代码
}catch(Exception e){
  sout(e)
}

------
throw: 在指定的方法中抛出指定的异常

格式： 
  throw new xxxException("异常产生的原因")

------
Objects类中的静态方法：判断传入的对象是否为空
Objects.requireNonNull(obj) 参数是obj对象
Objects.requireNonNull(obj,"提示的信息")

------
异常处理的第一种方式：声明异常

throws关键字： 
当方法内部抛出异常对象的时候,那么我们就必须处理这个异常对象
可以使用throws关键字处理异常对象,会把异常对象声明抛出给方法的调用者处理(自己不处理,给别人处理),最终交给JVM处理-->中断处理

使用格式： 在方法声明时使用；配合throw使用
修饰符 返回值类型 方法名(参数列表) throws AAAExcepiton,BBBExcepiton...{
    throw new AAAExcepiton("产生原因");
    throw new BBBExcepiton("产生原因");
    ...
}

注意:
  1.throws关键字必须写在方法声明处
  2.throws关键字后边声明的异常必须是Exception或者是Exception的子类
  3.方法内部如果抛出了多个异常对象,那么throws后边必须也声明多个异常
      如果抛出的多个异常对象有子父类关系,那么直接声明父类异常即可
  4.调用了一个声明抛出异常的方法,我们就必须的处理声明的异常
      要么继续使用throws声明抛出,交给方法的调用者处理,最终交给JVM
      要么try...catch自己处理异常

------
异常处理的第二种方式：捕获异常

格式:
  try{
      可能产生异常的代码
  }catch(定义一个异常的变量,用来接收try中抛出的异常对象){ //try中抛出什么异常对象,catch就定义什么异常变量,用来接收这个异常对象
      异常的处理逻辑,异常异常对象之后,怎么处理异常对象
      一般在工作中,会把异常的信息记录到一个日志中
  }
  ...
  catch(异常类名 变量名){

  }
注意:
  1.try中可能会抛出多个异常对象,那么就可以使用多个catch来处理这些异常对象
  2.如果try中产生了异常,那么就会执行catch中的异常处理逻辑,执行完毕catch中的处理逻辑,继续执行try...catch之后的代码
    如果try中没有产生异常,那么就不会执行catch中异常的处理逻辑,执行完try中的代码,继续执行try...catch之后的代码

------
Throwable类中定义了3个异常处理的方法
  String getMessage() 返回此 throwable 的简短描述。
  String toString() 返回此 throwable 的详细消息字符串。
  void printStackTrace()  JVM打印异常对象,默认此方法,打印的异常信息是最全面的

------
finally代码块
格式:
  try{
      可能产生异常的代码
  }catch(定义一个异常的变量,用来接收try中抛出的异常对象){
      异常的处理逻辑,异常异常对象之后,怎么处理异常对象
      一般在工作中,会把异常的信息记录到一个日志中
  }
  ...
  catch(异常类名 变量名){

  }finally{
      无论是否出现异常都会执行
  }
注意:
  1.finally不能单独使用,必须和try一起使用
  2.finally一般用于资源释放(资源回收),无论程序是否出现异常,最后都要资源释放(IO)

------
多个异常使用捕获又该如何处理呢？
  1. 多个异常分别处理。
  2. 多个异常一次捕获，多次处理。
  3. 多个异常一次捕获一次处理。

/*
一个try多个catch注意事项:
    catch里边定义的异常变量,如果有子父类关系,那么子类的异常变量必须写在上边,否则就会报错
    ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException
*/  

//运行时异常被抛出可以不处理。即不捕获也不声明抛出。
//默认给虚拟机处理,终止程序,什么时候不抛出运行时异常了,在来继续执行程序

如果finally有return语句,永远返回finally中的结果,避免该情况.

子父类的异常:
    - 如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。
    - 父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出
注意:
    父类异常时什么样,子类异常就什么样

------
自定义异常？    


---------------------------------
多线程
---------------------------------
并发： 指两个或多个事件在同一个时间段内发生         一个人吃两个馒头
并行： 指两个或多个事件在同一个时刻发生（同时发生）  两个人吃两个馒头

------
进程： 一个软件程序
线程： 是进程中的一个执行单位