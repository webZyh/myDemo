java三大特性： 封装（private）、继承（extend）、 多态
---------------------------------
继承：
继承是多态的前提，没有继承就没有多态
继承主要解决的问题： 共性抽取
------
父类、基类、超类
子类、派生类

------
在继承的关系中：“子类就是一个父类”
继承的格式： 
public class 子类 extends 父类{}

------
继承中成员变量的访问特点： 就近原则，没有就向上找

------
super  访问父类的变量和方法

------
方法的重写
重写（override）： 方法名一样，参数列表也一样，也叫覆写
重载（overload）： 方法名一样，参数列表不一样

覆盖重写注意事项：
  @Override 写在方法前面，用来检测是不是有效的正确覆盖重写
  子类方法的返回值必须小于等于父类方法的返回值范围
  子类方法的权限必须大于等于父类方法的权限修饰符
  	public > protected > (default)(什么都不写) > private

super.父类方法	将父类的方法拿过来使用  

------
继承中构造方法的访问特点：
  子类必须调用父类的构造方法（子类的构造方法中有一个默认的super(),调用父类无参构造）
  只有子类构造方法，才能调用父类构造方法
  super()的父类构造调用，必须放在第一个语句，且只能有一个

---------------------------------
抽象类
  概念：
  格式： public abstract class 类名 {}
抽象方法：必须在抽象类中
  格式： 加上abstract， 然后去掉大括号和里面的内容，直接分号结束
        public abstract void method();

使用：
  1、不能直接创建抽象类对象(不能new)
  2、必须用一个子类来继承抽象父类
  3、子类必须覆盖重写（实现）抽象父类中的所有抽象方法。去掉抽象方法的abstract关键字，然后补上方法体
  4、创建子类对象进行使用

注意事项：  
  1、抽象类不能直接创建对象
  2、抽象父类可以有构造方法
  3、抽象类中，不一定包含抽象方法；但是有抽象方法的类必定是抽象类
  4、抽象类的子类，必须覆写抽象父类中所有的抽象方法

---------------------------------
接口
接口就是一种‘公共的规范标准’，只要符合规范标准，就可以通用
接口是一种引用数据类型，最重要的内容就是其中的抽象方法

基本定义格式：  
public interface 接口名称{
  // 内容
}

接口中可以包含：常量、抽象方法、默认方法、静态方法、私有方法

------
接口中的抽象方法定义
public abstract void 方法名称(); // （public abstract：固定写法，可以写其中任何一个，可以不写，都是抽象方法）
void 方法名称();  // 不能有方法体，方法的三要素可以随意定义


---------------------------------
多态

