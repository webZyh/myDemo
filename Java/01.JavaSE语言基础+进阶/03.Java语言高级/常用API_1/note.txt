------------------------------
API （应用程序编程接口）  JDK提供现成的类，说明类的使用方法  

查询api文档： 看包、new、看方法

Scanner
Random
ArrayList

------------
引用类型的一般使用步骤
1、导包 import 包路径.类名称（import 包路径.*）
  只有java.lang包下的内容不需要导包，其他的包都需要import导入
2、创建
  类名称 对象名 = new 类名称();
3、使用
  对象名.成员方法名()


Scanner 键盘输入

import java.util.Scanner;

Scanner sc = new Scanner(System.in);  // System.in： 代表从键盘输入 
int num = sc.nextInt(); // 输入整数
String str = sc.next(); // 输入字符串

------------
匿名对象  Anonymous
new Person()
  只有右边的对象,没有左边的名字和赋值运算符
  只能用一次
  如果确定有一个对象只需要使用唯一的一次，就可以使用匿名对象

匿名对象作为方法的参数/返回值

------------
Random  产生随机数

import java.util.Random;
Random r = new Random();  
int num = r.nextInt();  // 范围：在int范围随机找一个数

------------
生成指定范围的随机数
int num = r.nextInt(3)   左闭右开区间[0-3),也就是0~2

------------------------------
对象数组： 存储对象的数组

***任何数据类型都可以作为数组中元素的类型
int[]
float[]
String[]
Person[] 

数组的缺点： 一旦创建，程序运行期间长度不能改变

------------
ArrayList 集合类： 和数组的功能类似，长度可以随意改变

ArrayList<E>   <E>泛型
泛型：
  就是装在集合当中的所有元素，全都是统一的类型
  ***只能是引用类型，不能是基本类型***

// 创建了一个ArrayList集合，集合的名称是list，里面装的全都是String字符串类型的数据
// 备注：从JDK 1.7+开始，右侧的尖括号内部可以不写内容，但是<>本身还是要写的。
ArrayList<String> list = new ArrayList<>();

注意事项：
对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。
如果内容是空，得到的是空的中括号：[]

添加： 
  list.add("zyh");  // [zyh, ...]
------------
ArrayList常用方法：
  add()
  get(int index)  // index 索引值，从0开始
  remove(int index)
  size()  返回集合的长度

  集合.fori   idea快捷键

------------
集合中如何存储基本数据类型

如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。

基本类型    包装类（引用类型，包装类都位于java.lang包下）
byte        Byte
short       Short
int         Integer     【特殊】
long        Long
float       Float
double      Double
char        Character   【特殊】
boolean     Boolean

ArrayList<int> list = new ArrayList<>();   // 错误
ArrayList<Integer> list = new ArrayList<>();

从JDK 1.5+开始，支持自动装箱、自动拆箱。
自动装箱：基本类型 --> 包装类型
自动拆箱：包装类型 --> 基本类型

------------
集合可以作为方法的参数以及方法的返回值

------------------------------
day08 
------------------------------
String 
  字符串的内容永不可变，是一个常量
  字符串可以共享使用

------------
创建字符串（4种方式）
三种构造方法：
public String();  // 空白字符串，不含内容
  String str = new String()
public String(char[] array);  //根据字符数组的内容，创建对应的字符串
  char[] charArray = {'a','b','c'};
  String str = new String(charArray);
public String(byte[] array);  //根据字节数组的内容，创建对应的字符串
  byte[] byteArray = {97,98,99};
  String str = new String(byteArray);
直接创建：
String str = "hello";

字符串本身就是一个对象，不需要new

------------
字符串的常量池
双引号直接写的字符串在常量池中，new的不在池中，池中的可以共享

------------
字符串的比较相关方法
字符串的获取相关方法
字符串的截取相关方法
字符串的转换相关方法
字符串的分割相关方法

------------------------------
定义方法的三要素
  返回值类型
  方法名称
  参数列表

public static 返回值类型 方法名称(参数列表){

  ...

  return ...
}

------------------------------
static 
一旦用了static关键字，
那么这样的内容不再属于对象自己，
而是属于类的，
所以凡是本类的对象，都可以共享

------------
static 修饰成员变量
该变量不再属于对象自己，而是属于所在的类，多个对象共享同一份数据

------------
static 修饰成员方法： 静态方法
  静态方法不属于对象，而是属于类
  如果没有static，那么必须首先创建对象，通过对象调用方法
  静态方法，可以通过对象名调用，也可以直接通过类名称来调用（推荐）
  对于本类当中的静态方法，可以省略类名称

  静态方法不能访问非静态变量，因为在内存中是先有的静态内容，后有的非静态内容
  静态方法中不能使用this, this代表当前对象，静态方法和对象没关系
===
public void method(){}  // 成员方法
public static void method(){}  // 静态方法
===

------------
根据类名称访问静态成员变量时，全程和对象没有关系，只和类有关系

------------
静态代码块
public class 类名称{
  static {  // 静态代码块
    
  }
}
当第一次用到本类时（调用构造方法），静态代码块执行【唯一】的一次

*静态代码块的典型用途： 用来一次性地对静态成员变量进行赋值


