-----------------------
--------
面向过程： 自己完成一个功能的全部过程
面向对象： 使用JDK提供的方法完成相应功能，不关注过程（帮你做事的人就是对象）
--------
打印数组，要求显示格式为： [1,2,3,4,5]

数组： int  array = {1,2,3,4,5};

面向过程
  System.out.print("[");
  for(int i = 0; i< array.length; i++){
    if(i == array.length-1){
      System.out.print(array[i]+"]");
    }else{
      System.out.print(array[i]+", ");
    }
  }

面向对象
  System.out.print(Array.toString(array));  

面向对象的三大基本特征： 封装、继承、多态

--------
类和对象
类： 是一组相关属性和行为的集合，可以看成一类事物的模板，是抽象的
对象： 是一类事物的具体体现。对象是类的一个实例，是具体的

类中的变量和方法,称为成员变量和成员方法
成员变量： String name;
成员方法： 不要写static关键字
  public void eat(){}

带有static关键字的是普通方法，可以直接调用，不需要对象来调用  

--------
类不能直接使用，需要根据类创建一个对象，才能使用
对象的创建和使用

1、导包： 指出要使用的类在什么位置
import 包名称.类名称;
对于和当前类属于同一个包的情况，可以省略导包语句

2、创建： 格式:  类名称 对象名 = new 类名称();
                Student stu = new Student();
                Student stu2 = stu;   // 将一个对象的地址赋值给另一个对象，则两个对象指向堆内存的同一块区域
3、使用：
使用变量： 对象名.成员变量名
使用方法： 对象名.成员方法名（参数）

--------
使用对象作为方法的参数，实际上传递的是地址值
对象可以作为方法的返回值

--------
成员变量和局部变量的区别
1、定义的位置不一样【重点】
  局部变量：在方法内部
  成员变量：在方法的外部，直接写在类中

2. 作用范围不一样【重点】
局部变量：只有方法当中才可以使用，出了方法就不能再用
成员变量：整个类全都可以通用。

3. 默认值不一样【重点】
局部变量：没有默认值，如果要想使用，必须手动进行赋值
成员变量：如果没有赋值，会有默认值，规则和数组一样

4. 内存的位置不一样（了解）
局部变量：位于栈内存
成员变量：位于堆内存

5. 生命周期不一样（了解）
局部变量：随着方法进栈而诞生，随着方法出栈而消失
成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失

--------
面向对象三大特征：封装、继承、多态

封装：
1、方法就是一种封装
2、关键字private也是一种封装

封装就是将一些细节信息隐藏起来，对外界不可见

使用private封装属性，使属性私有化

--------
当方法的局部变量和类的成员变量重名的时候，根据就近原则，优先使用局部变量
this.成员变量

--------
构造方法：用来创建对象
格式： public 类名称(参数类型 参数名称){}
调用： Student stu = new Student();
注意：
  构造方法不要写返回值类型，void也不要写
  构造方法不能有return
  如果没有编写任何构造方法，那么编译器将会默认赠送一个构造方法，没有参数，方法体什么事都不做
  一旦编写了至少一个构造方法，那么编译器将不会赠送，无参构造需要自己补上
  构造方法可以重载

--------
定义一个标准类：一个标准类通常拥有三个组成部分
1、所有的成员变量都要使用private关键字修饰
2、为每一个成员变量编写一对儿Getter和Setter方法
3、编写无参构造和有参构造

这样的标准类也叫Java Bean

写完成员变量后可以自动生成代码
Code  Generate   或者使用快捷键 alt+insert
