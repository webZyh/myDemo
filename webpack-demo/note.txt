版本 4.30.0
-------------------------------------
工具---管理复杂项目

脚手架工具使用webpack为底层代码的构建

前端工程化，扩充前端开发视野

1、彻底学会Webpack的配置
2、理解webpack的作用及原理
3、上手项目的打包过程配置
4、拥有工程化的前端思维
5、步入高级前端工程师行列

-------------------------------------
npx webpack xxx.js  	打包xx.js文件
（npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装！）

webpack 是一个 module bundles（模块打包工具）
打包js、css、png、jpg

ES Module模块引入方式
	引入方式	import xx from ''	import './xxx.css'	浏览器不认识import（需要使用webpack打包）
	导出方式： export default xx
CommonJs模块引入		
	引入方式：const x = require('')	
	导出方式：	module.exports = xx
CMD
AMD
-------------------------------------
作业：
https://webpack.js.org/
Documentation->Concepts->Modules 熟悉模块化的基本概念
Documentation->API->Modules	模块化的相关语法
------------------------------------- 
搭建Webpack环境

安装比较新的node版本 可以增加webpack的打包速度
node -v	打印版本号
npm -v	

创建一个文件夹	mkdir webpack-demo
npm init -y		跳过提示初始化package.json
在package.json中添加 private：true	表示私人项目，不会被发布到npm线上仓库

------------
安装webpack
----------
全局安装（不好）
npm install webpack webpack-cli -g	（webpack-cli：使能在命令行运行webpack命令）
webpack -v	查找全局的webpack版本号

npm uninstall webpack webpack-cli -g	全局删除
----------
项目内安装(局部安装)
进入项目文件夹
npm install webpack webpack-cli --save-dev
（--save-dev === -D）
安装完后会出现node_modules目录（保护wenpack的依赖）
npx webpack -v	查找当前项目的webpack版本号
（npx会去当前目录的node_modules中找webpack）


npm info webpack 查看webpack的历史版本号
npm install webpack@4.16.5 -D 安装具体的版本

-------------------------------------
webpack的配置文件 	webpack.config.js（只能是这个名字）
如果要使用其他名字打包：npx webpack --config 其他名字

定义打包的配置

const path = require('path')
module.exports={
	mode:'development',		打包模式，决定webpack法人优化级别，三种模式
		development：不启用压缩
		production：启用压缩，默认模式
		none:不优化
	entry:	'./src/index.js'	//入口，单入口-SPA;简写方式
		{
			main:'./src/index.js'		//上面为简写；main在output中对应[name]
		},
		{			//多入口-MPA
			index：'./src/index.js'
			news：'......'
		},		
	output:{		//输出
		path: path.resolve(__dirname,'dist') //打包输出的目录；路径目录(必须要绝对路径),当前目录的dist目录, __dirname:表示当前路径	
		filename:'[name].bundle.min.js'	 //打包后输出的文件名；[name]:占位符对应entry中的key值
	}
}

使用 npx webpack 命令打包
npx webpack --config webpackconfig.js 	以config.js(自定义文件)这个文件为配置文件打包

修改打包命令：
npm scripts方式
在package.json中配置打包命令 
"scripts": {
	"bundle":"webpack"
},
npx webpack   -->	npm run bundle


-------------------------------------
作业：
https://webpack.js.org/
Documentation->Guides->Getting Started	
------------------------------------- 
------------------------------------- 
打包打印内容
$ npx webpack
Hash: ed86fd323555e62d0cd4		// 本次打包的唯一标识值
Version: webpack 4.30.0			// webpack打包版本
Time: 273ms				// 打包耗时
Built at: 2019-04-25 15:02:21		
    Asset       Size  Chunks             Chunk Names
bundle.js  930 bytes       0  [emitted]  main
Entrypoint main = bundle.js
[0] ./src/index.js 10 bytes {0} [built]

WARNING in configuration		//没有指定打包的模式
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/
-------------------

--------------------------------------------------------------------------
第三章：Loader
-------------------
webpack是什么
模块打包工具	模块：js、css、png、jpg、svg、txt、excel等文件
-------------

3.1、Loader是什么？
	webpack只能识别.js模块的打包
	Loader告诉webpack其他的模块应该怎么打包

使用每个loader需要先安装
npm install file-loader -D

在webpack.config.js中配置module

module:{
	rules:[
		// 每一个loder的配置
		{
			test: /\.jpg/,
			use:{
				loader: "file-loader"，
				options:{
					// 打包相关配置内容
				}
			} 
		}
	]
}

-------------
3.2、Loader打包静态资源（图片）

-------------------------------------
作业：
https://www.webpackjs.com/loaders/
阅读文档
file-loader
url-loader	// 可以实现file—loader的一切功能；不会单独生成打包后的文件，配置limit：2048，超过2k会生成文件
-------------------------------------



3.3、Loader打包静态资源（样式篇）
****************
loader的执行顺序是从下往上，从右往左的
****************

css文件引入其他css语法: @import "xx.css"

css文件:
style-loader	得到css-loader合并的文件后，将其挂载到<head><style></style></head>中
css-loader 	分析几个css文件的关系，合并成一个css文件
需要配合使用

---
sass/less文件:
sass-loader,需要同时安装node-sass

---
postcss-loader
自动添加浏览器前缀	-webkit-transform: translate(100px,100px)
需要新增一个配置文件 postcss.config.js

module.exports = {
	plugins:[
		require('autoprefixer')	// 需要安装autoprefixer插件
	]
}

3.4、
css-loader相关配置意义
{
	loader:'css-loader',
	options:{
		importLoaders: 2,	//会多次使用下面的sass-loader,postcss-loader
		modules: true,	//可以使用某个特定css文件中的样式
	}
},


> 模块化打包css:设置'style-loader'的
	options:{
		modules: true,	//可以使用某个特定css文件中的样式
	}

> Loader打包静态资源（字体文件）	www.iconfont.cn
www.iconfont.cn 		

flie-loader

-------------------------------------
作业：
https://webpack.js.org/
Documentation->Guides->Asset Management	各种静态资源的打包方法
Documentation->Loader	关于样式打包的loader
------------------------------------- 

3.5、使用plugins让打包更便捷
plugins：可以在webpack运行到某个时刻的时候，帮你做一些事情（类似于vue的生命周期）

html-webpack-plugin：会在打包结束后自动生成一个html文件，并把打包生成的js自动引入到这个html中
使用步骤：
安装  html-webpack-plugin
引入插件
const HtmlWebpackPlugin = require('html-webpack-plugin');
配置一个模板
plugins:[
	new HtmlWebpackPlugin({
		template: 'src/index.html'	//以该文件为模板
	})
],

如果你有多个 webpack 入口点， 他们都会在生成的HTML文件中的 script 标签内

clean-webpack-plugin
每次打包时清空之前的打包的文件
使用步骤：
安装
引入
配置
plugins:[
	new HtmlWebpackPlugin({
		template: 'src/index.html'	//以该文件为模板
	}),
	new CleanWebpackPlugin(['dist'])	//删除dist目录  
]


3.6、entry、output相关配置
	entry:	'./src/index.js'	//入口，单入口-SPA;简写方式
		{
			main:'./src/index.js'		//上面为简写；main在output中对应[name]
		},
		{			//多入口-MPA
			index：'./src/index.js'
			news：'......'
		},		
	output:{		//输出
		path: path.resolve(__dirname,'dist') //打包输出的目录；路径目录(必须要绝对路径),当前目录的dist目录, __dirname:表示当前路径	
		filename:'[name].bundle.min.js'	 //打包后输出的文件名；[name]:占位符对应entry中的key值
		publicPath: 'http://cdn.com'	// 引入的js文件可以添加路径
	}

-------------------------------------
作业：
https://webpack.js.org/
Documentation->Configuration-> output、entry	（看部分）
Documentation->Guides->Output Management(全部)
Documentation->Plugins->html-webpack-plugin、clean-webpack-plugin
------------------------------------- 
2019-12-18
------------------------------------- 

**********
2019-04-25
********************

3.7、sourceMap	查找错误源码的位置

3.8、使用WebpackDevServer提升开发效率

修改代码后，自动打包
1、配置package.json ,使用--watch
"scripts": {
	"watch":"webpack --watch"
},

2、使用WebpackDevServer,开启一个http服务器localhost:8080，自动刷新浏览器
需要安装webpack-dev-server
配置webpack.config.js
devserver:{
	contentBase: './dist',		
	open: true   //启动webpackDevServer时，自动打开浏览器
}	

配置package.json 
"scripts": {
	"watch":"webpack --watch",
	"start":"webpack-dev-server"	**使用此命令不会在本地生成dist目录，而是打包放在内存中
},

3、使用node写一个自己的server	 实现自动打包

配置package.json 
"scripts": {
	"watch":"webpack --watch",
	"start":"webpack-dev-server",
	"middleware":"node server.js"
},

const express = require('express')
const webpack =require('webpack')
const webpackDevMiddleware = require('webpack-dev-middleware')
const config = require('./webpack.config.js')

//在node中使用webpack
const complier = webpack(config)

const app = express()

app.use(webpackDevMiddleware(complier,{
	publicPath: config.out.publicPath//可以不写
}))

app.listen(3000,()=>{
	console.log('server is running')
})

3.9、Hot Module Replacement 热模块替换,简称HMR

css代码实现HMR				css-loader已经实现了类似下面的底层代码
在devServer中配置
增加plugins 	new webpack.HotModuleReplacementPlugin()

js代码实现HMR
更新某一个js代码的改变
需要手写下面的代码

import xx from './xx.js'
if(module.hot){
	module.hot.accept('./xx.js',()=>{
		xx();
	})
}

3.10、使用Babel处理ES6语法

安装babel-loader @babel/core
安装@babel/preset-env

配置：
rules: [
    { 
	    test: /\.js$/, 
	    exclude: /node_modules/, 
	    loader: "babel-loader",
	    options:{
	  		"presets": ["@babel/preset-env",{ //处理es6中的const，()=>{}等语法
	  			useBuiltIns: "usage"		
	  		}]
	    } 
    }
]

polyfill	//解析ES6中的promise，map等语法

安装@babel/polyfill
引入
import "@babel/polyfill"

会把依赖的内容一起打到main.js里，配置useBuiltIns: "usage" 使其不打到main.js中

3.10、使用Babel处理ES6语法

3.11、配置React代码的打包


--------------------------------------------------------------------------
第四章
-------------------
4.1	Tree Shaking	（webpack2.0）
只引入模块中需要用的内容
只支持ES Module引入	--- import {xx} from './xx.js'

配置：
mode:'development'	开发环境模式下
optimization:{
	usedExports: true
}

package.json中添加
"sideEffects": false,	不做Tree Shaking, 防止忽略打包某些文件,如css

**********
2019-04-26
********************

"sideEffects": "*.css",	遇见css文件，不做Tree Shaking


mode:'production'	生成环境，不用optimization配置
需要"sideEffects": false配置

4.2、Develoment和Production模式的区分打包

提取Develoment和Production公共代码

合并 
安装webpack-merge
----------------------------
npm run dev 	启动开发环境
npm run build 	生产环境

webpack-dev-server		启动一个服务器，不会生成dist目录
webopack				生成dist目录
----------------------------


4.3、4.4 webpack和code splitting之间的关系

code splitting 代码分割

1、自己做代码分割
代码库
安装lodash
import _ from 'lodash'   

新建lodash.js
import _ from 'lodash'
window._ = _; 	引入lodash，并将其挂载在window对象上

entry:{		//工具库和业务逻辑代码分开打包
	main：'./src/index.js'
	lodash'./src/lodash.js'
},	

2、webpack自动做代码分割
需要配置:
optimization:{
	usedExports: true,  //Tree Shaking
	splitChunks:{		//代码分割
		chunks:'all'
	}
},

3、webpack 异步代码打包
无需做任何配置，会自动进行代码分割放置到新的文件中

index.js

function getComponent(){
	return import('lodash').then(({default: _})=>{
		let element = document.createElement('div');
		element.innerHTML = _.join(['dd','aa'],'--')
		return element;
	})
}
getComponent().then((element)=>{
	document.body.appendChild(element);
})

上面的import('lodash')动态导入文件会报错，
安装npm install babel-plugin-dynamic-import-webpack --save-dev
在.babelrc文件中配置
"plugins": [
    "dynamic-import-webpack"
]

会把lodash打包到一个0.js中

"plugins": [
    "@babel/plugin-syntax-dynamic-import" //支持动态引入语法
]

4.5、（重复）

4.6、 	SplitChunksPlugin
同步代码配置项
optimization:{
	
	splitChunks:{		//代码分割 
		//代码分割的要求
		chunks:'all',					
		minSize: 30000,
		minChunks: 1, //模块被引用一次
		maxAsyncRequests:5,
		maxInitialRequests:3,
		automaticNameDelimiter: '~',
		//代码分割的要求
		cacheGroups:{	//缓存组
			vendors:{
				test: /[\\/]node_modules[\\/]/,	//node_modules中的模块
				priority: -10,	//优先级，值越大，优先级越高
				filename: 'vendors.js',	//打包后的存放的文件
			},
			default:{
				priority: -20,	//优先级
				reuseExistingChunk: true, //如果一个模块被打包过，就直接使用之前打包的模块
				filename: 'common.js'
			},
		}
	}
},

4.7、4.8  Lazy Loading懒加载，Chunk是什么？


Lazy Loading懒加载: 使用promise或者async await异步处理代码，实现按需加载


Chunk是什么？ 打包生成的js文件就是Chunk

4.9、 css的代码分割

plugin： MiniCssExtractPlugin
mini-css-extract-plugin
不支持HMR，开发环境慎用 
配置webpack.prod.js


4.10、 热模块（重复）

4.11、shimming
垫片:修改webpack的默认行为或者实现webpack不能实现的效果

new webpack.ProvidePlugin({
	$:'jquery',		//一个模块中有$,自动帮其引入jquery
	_:'lodash'
})

imports-loader  改变当前模块的this指向

4.12、环境变量的使用


**********
2019-04-27
********************

--------------------------------------------------------------------------
第五章
-------------------
业务代码打包，库代码打包

library
libraryTarget

externals:{
	lodash:{}
}

5.2、 Progressive Web Application

http server 开启一个本地服务器

Progressive Web Application：服务器挂掉后利用缓存使得页面还能显示

workbox-wabpack-plugin

利用workbox plugin实现pwa

仅线上代码需要支持pwa

配置webpack.prod.js
引入workbox-wabpack-plugin插件

new WorkboxPlugin.GenerateSW({
	clientsClaim: true,
	skipWaiting: true
})

index.js:
if('serviceWorker' in navigator){
	window.addEventListener('load',()=>{
		navigator.serviveWorker.register('/service-worker').then(()=>{
			...
		})
	})
}


5.2、TypeScript的打包配置
微软
规范代码

打包typescript文件
ts-loader
还需配置一个tsconfig.json
{
	"compilerOption":{
		"outDir" : "./dist",
		"module" ："es6", 模块引入方式
		"target" ："es5",
		"allows": true	允许在ts中引入js模块
	}

}

插件
@type/lodash	TypeScript使用lodash时有错误语法提示
@types/jquery

import * as _ from 'lodash' 导入方法

5.4	使用WebpackDevServer实现请求转发
proxy的配置只能在devserver开发环境才有效
devServer:{
	proxy:{	//代理
		//'/react/api':'http://localhost:3000',
		secure:false,	//https时添加
		changeOrigin: true,	//
		'/react/api'：{
			target: 'http://localhost:3000',
			pathRewrite:{
				'header.json':'demo.json'
			}
		}
		
	}	
}

5.5	WebpackDevServer解决单页面应用路由问题

historyApiFallback: true

5.6、5.7 EsLint在webpack中的配置

EsLint：代码规范

安装eslint 
npm install eslint --save-dev

配置eslint规范命令:npx eslint --init 生成.eslintrc.js文件

eslint检查代码的方式：
--------
第一种：npx eslint src 校验src目录下的代码

.eslintrc.js文件：
module.exports={
	"extends":'',
	"parser":"babel-eslint",	//解析器，安装babel-eslint
	"rules":{	//配置eslint代码规则，为0表示不遵循
		"" : 0
	},
	globals:{
		document: false //可以使用ducument全局变量
	}
}

第二种：vscode 	安装eslint插件

第三种：npm install eslint-loader

配置：
test: /\.js$/, 
exclude: /node_modules/, 
use:[
	"babel-loader",
	"eslint-loader"	//检测代码是否符合eslint
]
eslint-loader:会降低打包的效率
devServer:{
	overlay: true
}

第四种： git钩子 检测代码是否符合eslint规范，不符合禁止提交代码

5.8、 提升webpack打包速度的方法
1、跟上技术的迭代（Node，Npm，Yarn）
2、在尽可能少的模块上应用loader
	使用：exclude: /node_modules/
3、plugin尽可能精简并确保可靠性
4、resolve参数合理配置


**********
2019-04-28
********************

--------------------------------------------------------------------------
第六章
-------------------
6.1/6.2
编写loader

6.3
编写plugin

6.4/6.5
Bundler源码编写（模块分析）

6.6
Bundler源码编写（Dependencies Graph）

6.7
Bundler源码编写（生成代码）

--------------------------------------------------------------------------
第七章
-------------------
7.3 Vue Cli3



----------------------------------------------------------------
npm install -g vue-cli
全局安装路径C:\Users\用户名\AppData\Roaming\npm\node_modules\vue-cli
使用vue -V查看vue-cli版本

vue-cli的作用，创建一个vue的项目模板，并帮你完成了webpack对项目的打包配置

----------------------------------------
vue-cli2.0	
创建项目：vue init webpack my-project

vue-cli3.0	正式版2018-08-10
创建项目：vue create my-project

----------------------------------------------------------------
学习webpack总结：
webpack,很早就听说的一个技术，但是不知道有什么用，用html/css/jquery写MPA项目的时候，感觉根本就不需要这个技术。用vue写SPA项目，使用vue-cli下载一个vue项目的模板，在模板中就可以直接写自己的vue代码，使用npm run dev就可以在本地运行起来,也知道可以使用npm run build命令，可以生成一个dist文件夹给后台部署上线，也是完全就不需要webpack啊。
那么webpack到底有什么用呢，看一下webpack官网首页，它对自己的介绍是：打包一起的图片、样式表、脚本、资源；总结一下，webpack是打包用的，那为什要打包呢？就像我上面说的，没有webpack也可以写vue的项目，写react的项目
真正的了解了webpack后，为自己的无知感到叹息，不过少知而迷、不知而盲，学无止境啊；下面就说说原因：原来我们写vue项目时，就已经使用了webpack了，纳尼？我并没有用过啊，时这样的，在使用vue-cli创建vue项目模板时，vue-cli这个脚手架就已经为我们的vue项目配置好webpack了，所以我们使用的npm run dev、npm run build这些命令，就是webpack提供的；我们可以看到vue项目有个build文件夹，里面放置的就是webpack的配置文件，（这里说的vue-cli版本是2.9.6）webpack.dev.conf.js是开发环境配置，webpack.prod.conf.js是生产环境配置，webpack.base.conf.js是二者公共部分的提取；在package.json中可以看到webpack打包命令的配置，npm run dev就是这里配置的，此时，我们已经知道vue项目模板的底层是封装了webpack的配置的，但还是不知道webpack是做什么的，没关系，继续...
继续以vue模板为例，在webpack配置中有个entry: {app: './src/main.js'},就是指webpack以vue项目中src目录中的main.js为入口，打包main.js中的内容，将其中所有的内容打包到一个app.js中，供页面调用；我们知道，vue代码、sass、less、es6代码浏览器是不认的，此时打包好的app.js是解析过的代码，浏览器就可以使用了，再往下细说：
我们看main.js的代码，它使用了import这个es6的引用语法，webpack就可以实现这种语法的解析，将这种语法翻译成浏览器可以使用的语法；webpack起初是只能解析js代码；对于其他的语法，webpack是使用loader来解析的，需要我们在配置文件中添加对应的loader；例如：解析vue就使用vue-loader，解析css使用style-loader、css-loader,解析js的es6语法使用babel-loader,解析sass、less使用sass-loader（需要安装node-sass），解析字体文件使用file-loader,解析jpg/png等图片文件使用url-loader,当然还有很多；除了这些loader以外，我们还需要根据需要配置依赖。webpack中还有很多的loader和plugin，可以处理各种各样的问题。这篇文章主要是解释webpack是什么，就不继续深入，webpack要学习的东西很多，大家加油！
